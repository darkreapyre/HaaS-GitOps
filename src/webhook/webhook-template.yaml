AWSTemplateFormatVersion: '2010-09-09'
Description: Git Webhooks to clone repository contents to S3.

Parameters:

  CustomDomainName:
    Description: Use a custom domain name for the webhook endpoint, if left blank
      API Gateway will create a domain name for you
    Type: String
    Default: ''

  GitToken:
    NoEcho: 'true'
    Description: zipdl method only. Personal access token, needed for GitHub Enterprise
      and GitLab
    Type: String
    Default: ''
    ConstraintDescription: this token must be generated from the git server/provider

  OauthKey:
    Description: zipdl method only. OAuth2 Key needed for BitBucket.  For bitbucket
      server this should be a username.
    Type: String
    Default: ''
    ConstraintDescription: this key must be generated from the git server/provider

  OauthSecret:
    NoEcho: 'true'
    Description: zipdl method only. OAuth2 Secret needed for BitBucket. For bitbucket
      server this should be a password.
    Type: String
    Default: ''
    ConstraintDescription: this secret must be generated from the git server/provider

  OutputBucket:
    Description: 'S3 Experiments bucket as the input source for the experiment trigger'
    Type: String
    Default: ''

  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String

  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: webhook/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String

  # VPCId:
  #   Description: Id of the VPC the DL Zip lambda should run in
  #   Type: String
  #   Default: ''

  # VPCCidrRange:
  #   Description: CIDR range of the VPC
  #   Type: String
  #   Default: ''

  # SubnetIds:
  #   Description: SubnetIds the DL Zip lambda should run in
  #   Type: CommaDelimitedList
  #   Default: ''

  ScmHostnameOverride:
    Description: Hostname to override the incoming json request with
    Type: String
    Default: ''

Conditions:

  UseCustomDomain: !Not
    - !Equals
      - !Ref 'CustomDomainName'
      - ''
  UseGitToken: !Not
    - !Equals
      - !Ref 'GitToken'
      - ''
  UseOauthKey: !Not
    - !Equals
      - !Ref 'OauthKey'
      - ''
  UseOauthSecret: !Not
    - !Equals
      - !Ref 'OauthSecret'
      - ''
  # ShouldRunInVPC: !Not
  #   - !Equals
  #     - !Ref 'VPCId'
  #     - ''
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Resources:

  ZipDlRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: git2cp-zipdl
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
                      - /*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*

  # ZipDlLambdaSecurityGroup:
  #   # Condition: ShouldRunInVPC
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security Group to allow the lambda to access the git service
  #     GroupName: ZipDlLambdaSecurityGroup
  #     SecurityGroupEgress:
  #       - CidrIp: !Ref 'VPCCidrRange'
  #         FromPort: 0
  #         IpProtocol: tcp
  #         ToPort: 65535
  #     SecurityGroupIngress:
  #       - CidrIp: !Ref 'VPCCidrRange'
  #         FromPort: 0
  #         IpProtocol: tcp
  #         ToPort: 65535
  #     VpcId: !Ref 'VPCId'

  ZipDlLambda:
    # DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: download_zip.lambda_handler
      Role: !GetAtt 'ZipDlRole.Arn'
      Code: lambda/
      Description: 'Download zip file of git repo'
      Runtime: python3.6
      MemorySize: 128
      Timeout: 30
      # VpcConfig: !If
      #   - ShouldRunInVPC
      #   - SecurityGroupIds:
      #       - !Ref 'ZipDlLambdaSecurityGroup'
      #     SubnetIds: !Ref 'SubnetIds'
      #   - !Ref 'AWS::NoValue'
      Environment:
        Variables:
          SCM_HOSTNAME_OVERRIDE: !Ref 'ScmHostnameOverride'

  WebHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: git2cp-webhook
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt 'ZipDlLambda.Arn'
                  # - !GetAtt 'GitPullLambda.Arn'
                  # - !GetAtt 'ZipDlLambda.Arn'

  WebHookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: '2.0'
        info:
          version: '2016-07-26T07:34:38Z'
          title: !Join
            - ''
            - - G2CP-
              - !Ref 'AWS::StackName'
        schemes:
          - https
        paths:
          /zipdl:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                type: aws
                credentials: !GetAtt 'WebHookRole.Arn'
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.X-Amz-Invocation-Type: '''Event'''
                passthroughBehavior: when_no_templates
                httpMethod: POST
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path//2015-03-31/functions/
                    - !GetAtt 'ZipDlLambda.Arn'
                    - /invocations
                requestTemplates:
                  application/json: !Join
                    - ''
                    - - "#set($allParams = $input.params())\n"
                      - "{\n"
                      - "\"body-json\" : $input.json('$'),\n"
                      - "\"params\" : {\n"
                      - "#foreach($type in $allParams.keySet())\n"
                      - "    #set($params = $allParams.get($type))\n"
                      - "\"$type\" : {\n"
                      - "    #foreach($paramName in $params.keySet())\n"
                      - "    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
                        \n"
                      - "        #if($foreach.hasNext),#end\n"
                      - "    #end\n"
                      - "}\n"
                      - "    #if($foreach.hasNext),#end\n"
                      - "#end\n"
                      - "},\n"
                      - "\"stage-variables\" : {\n"
                      - "#foreach($key in $stageVariables.keySet())\n"
                      - "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                        \n"
                      - "    #if($foreach.hasNext),#end\n"
                      - "#end\n"
                      - "},\n"
                      - "\"context\" : {\n"
                      - "    \"account-id\" : \"$context.identity.accountId\",\n"
                      - "    \"api-id\" : \"$context.apiId\",\n"
                      - "    \"api-key\" : \"$context.identity.apiKey\",\n"
                      - "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\"\
                        ,\n"
                      - "    \"caller\" : \"$context.identity.caller\",\n"
                      - "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
                        ,\n"
                      - "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
                        ,\n"
                      - "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
                        ,\n"
                      - "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
                        ,\n"
                      - "    \"http-method\" : \"$context.httpMethod\",\n"
                      - "    \"stage\" : \"$context.stage\",\n"
                      - "    \"source-ip\" : \"$context.identity.sourceIp\",\n"
                      - "    \"user\" : \"$context.identity.user\",\n"
                      - "    \"user-agent\" : \"$context.identity.userAgent\",\n"
                      - "    \"user-arn\" : \"$context.identity.userArn\",\n"
                      - "    \"request-id\" : \"$context.requestId\",\n"
                      - "    \"resource-id\" : \"$context.resourceId\",\n"
                      - "    \"resource-path\" : \"$context.resourcePath\",\n"
                      - "    \"oauth-key\" : \"$stageVariables.oauthkey\",\n"
                      - "    \"oauth-secret\" : \"$stageVariables.oauthsecret\",\n"
                      - "    \"output-bucket\" : \"$stageVariables.outputbucket\"\
                        ,\n"
                      - "    \"git-token\" : \"$stageVariables.gittoken\"\n"
                      - "    }\n"
                      - '}'
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
        definitions:
          Empty:
            type: object

  WebHookApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'WebHookApi'
      StageName: DummyStage

  WebHookApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref 'WebHookApiDeployment'
      RestApiId: !Ref 'WebHookApi'
      StageName: Prod
      Variables:
        outputbucket: !Ref 'OutputBucket'
        gittoken: !If
          - UseGitToken
          - !Ref 'GitToken'
          - !Ref 'AWS::NoValue'
        oauthkey: !If
          - UseOauthKey
          - !Ref 'OauthKey'
          - !Ref 'AWS::NoValue'
        oauthsecret: !If
          - UseOauthSecret
          - !Ref 'OauthSecret'
          - !Ref 'AWS::NoValue'

  CustomDomainCertificate:
    Condition: UseCustomDomain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref 'CustomDomainName'

  WebHookApiCustomDomainName:
    Condition: UseCustomDomain
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref 'CustomDomainCertificate'
      DomainName: !Ref 'CustomDomainName'

  WebHookApiCustomDomainNameMapping:
    Condition: UseCustomDomain
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref 'CustomDomainName'
      RestApiId: !Ref 'WebHookApi'

Outputs:

  ZipDownloadWebHookApi:
    Value: !Join
      - ''
      - - ' https://'
        - !If
          - UseCustomDomain
          - !Ref 'CustomDomainName'
          - !Join
            - ''
            - - !Ref 'WebHookApi'
              - .execute-api.
              - !Ref 'AWS::Region'
              - .amazonaws.com
        - /
        - !Ref 'WebHookApiProdStage'
        - /zipdl
