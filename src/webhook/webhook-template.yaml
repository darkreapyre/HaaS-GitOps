AWSTemplateFormatVersion: '2010-09-09'
Description: Git Webhooks to clone repository contents to S3.

Parameters:

  # AllowedIps:
  #   Description: gitpull method only. Comma seperated list of IP CIDR blocks for source
  #     IP authentication. The BitBucket Cloud IP ranges are provided as defaults.
  #   Type: String
  #   Default: 18.205.93.0/25,18.234.32.128/25,13.52.5.0/25

  # ApiSecret:
  #   Description: 'gitpull method only. WebHook Secrets for use with GitHub Enterprise
  #     and GitLab. If a secret is matched IP range authentication is bypassed. Cannot
  #     contain: , \ "'
  #   Type: String
  #   Default: ''
  #   NoEcho: 'true'

  CustomDomainName:
    Description: Use a custom domain name for the webhook endpoint, if left blank
      API Gateway will create a domain name for you
    Type: String
    Default: ''

  GitToken:
    NoEcho: 'true'
    Description: zipdl method only. Personal access token, needed for GitHub Enterprise
      and GitLab
    Type: String
    Default: ''
    ConstraintDescription: this token must be generated from the git server/provider

  OauthKey:
    Description: zipdl method only. OAuth2 Key needed for BitBucket.  For bitbucket
      server this should be a username.
    Type: String
    Default: ''
    ConstraintDescription: this key must be generated from the git server/provider

  OauthSecret:
    NoEcho: 'true'
    Description: zipdl method only. OAuth2 Secret needed for BitBucket. For bitbucket
      server this should be a password.
    Type: String
    Default: ''
    ConstraintDescription: this secret must be generated from the git server/provider

  OutputBucket:
    Description: 'S3 Experiments bucket as the input source for the experiment trigger'
    Type: String
    Default: ''

  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    # Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String

  # BucketRegion:
  #   Default: ''
  #   Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
  #   Type: String

  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: webhook/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String

  VPCId:
    Description: Id of the VPC the DL Zip lambda should run in
    Type: String
    Default: ''

  VPCCidrRange:
    Description: CIDR range of the VPC
    Type: String
    Default: ''

  SubnetIds:
    Description: SubnetIds the DL Zip lambda should run in
    Type: CommaDelimitedList
    Default: ''

  ScmHostnameOverride:
    Description: Hostname to override the incoming json request with
    Type: String
    Default: ''

Conditions:
  # UseAllowedIps: !Not
  #   - !Equals
  #     - !Ref 'AllowedIps'
  #     - ''
  # UseApiSecret: !Not
  #   - !Equals
  #     - !Ref 'ApiSecret'
  #     - ''
  UseCustomDomain: !Not
    - !Equals
      - !Ref 'CustomDomainName'
      - ''
  UseGitToken: !Not
    - !Equals
      - !Ref 'GitToken'
      - ''
  UseOauthKey: !Not
    - !Equals
      - !Ref 'OauthKey'
      - ''
  UseOauthSecret: !Not
    - !Equals
      - !Ref 'OauthSecret'
      - ''
  # AutoGenOutputBucketName: !Not
  #   - !Equals
  #     - !Ref 'OutputBucketName'
  #     - ''
  ShouldRunInVPC: !Not
    - !Equals
      - !Ref 'VPCId'
      - ''
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Mappings:
  RegionMap:
    ap-northeast-1:
      LayerArn: arn:aws:lambda:ap-northeast-1:249908578461:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:ap-northeast-1:249908578461:layer:AWSLambda-Python-AWS-SDK:4
    us-east-1:
      LayerArn: arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python-AWS-SDK:4
    ap-southeast-1:
      LayerArn: arn:aws:lambda:ap-southeast-1:468957933125:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:ap-southeast-1:468957933125:layer:AWSLambda-Python-AWS-SDK:4
    eu-west-1:
      LayerArn: arn:aws:lambda:eu-west-1:399891621064:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:eu-west-1:399891621064:layer:AWSLambda-Python-AWS-SDK:4
    us-west-1:
      LayerArn: arn:aws:lambda:us-west-1:325793726646:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:us-west-1:325793726646:layer:AWSLambda-Python-AWS-SDK:4
    ap-east-1:
      LayerArn: arn:aws:lambda:ap-east-1:118857876118:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:ap-east-1:118857876118:layer:AWSLambda-Python-AWS-SDK:4
    ap-northeast-2:
      LayerArn: arn:aws:lambda:ap-northeast-2:296580773974:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:ap-northeast-2:296580773974:layer:AWSLambda-Python-AWS-SDK:4
    ap-northeast-3:
      LayerArn: arn:aws:lambda:ap-northeast-3:961244031340:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:ap-northeast-3:961244031340:layer:AWSLambda-Python-AWS-SDK:4
    ap-south-1:
      LayerArn: arn:aws:lambda:ap-south-1:631267018583:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:ap-south-1:631267018583:layer:AWSLambda-Python-AWS-SDK:4
    ap-southeast-2:
      LayerArn: arn:aws:lambda:ap-southeast-2:817496625479:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:ap-southeast-2:817496625479:layer:AWSLambda-Python-AWS-SDK:4
    ca-central-1:
      LayerArn: arn:aws:lambda:ca-central-1:778625758767:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:ca-central-1:778625758767:layer:AWSLambda-Python-AWS-SDK:4
    eu-central-1:
      LayerArn: arn:aws:lambda:eu-central-1:292169987271:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:eu-central-1:292169987271:layer:AWSLambda-Python-AWS-SDK:4
    eu-north-1:
      LayerArn: arn:aws:lambda:eu-north-1:642425348156:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:eu-north-1:642425348156:layer:AWSLambda-Python-AWS-SDK:4
    eu-west-2:
      LayerArn: arn:aws:lambda:eu-west-2:142628438157:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:eu-west-2:142628438157:layer:AWSLambda-Python-AWS-SDK:4
    eu-west-3:
      LayerArn: arn:aws:lambda:eu-west-3:959311844005:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:eu-west-3:959311844005:layer:AWSLambda-Python-AWS-SDK:4
    sa-east-1:
      LayerArn: arn:aws:lambda:sa-east-1:640010853179:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:sa-east-1:640010853179:layer:AWSLambda-Python-AWS-SDK:4
    us-east-2:
      LayerArn: arn:aws:lambda:us-east-2:259788987135:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:us-east-2:259788987135:layer:AWSLambda-Python-AWS-SDK:4
    us-west-2:
      LayerArn: arn:aws:lambda:us-west-2:420165488524:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws:lambda:us-west-2:420165488524:layer:AWSLambda-Python-AWS-SDK:5
    cn-north-1:
      LayerArn: arn:aws-cn:lambda:cn-north-1:683298794825:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws-cn:lambda:cn-north-1:683298794825:layer:AWSLambda-Python-AWS-SDK:4
    cn-northwest-1:
      LayerArn: arn:aws-cn:lambda:cn-northwest-1:382066503313:layer:AWSLambda-Python-AWS-SDK
      LayerVersionArn: arn:aws-cn:lambda:cn-northwest-1:382066503313:layer:AWSLambda-Python-AWS-SDK:4

Resources:
  # LambdaZipsBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     Tags: []
  # CopyZips:
  #   Type: AWS::CloudFormation::CustomResource
  #   Properties:
  #     ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
  #     DestBucket: !Ref 'LambdaZipsBucket'
  #     SourceBucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
  #     Prefix: !Ref 'QSS3KeyPrefix'
  #     Objects:
  #       - functions/packages/CreateSSHKey/lambda.zip
  #       - functions/packages/DeleteBucketContents/lambda.zip
  #       - functions/packages/GitPullS3/lambda.zip
  #       - functions/packages/ZipDl/lambda.zip
  # CopyZipsRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Path: /
  #     Policies:
  #       - PolicyName: lambda-copier
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:GetObject
  #               Resource: !Sub
  #                 - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
  #                 - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
  #             - Effect: Allow
  #               Action:
  #                 - s3:PutObject
  #                 - s3:DeleteObject
  #               Resource:
  #                 - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  # CopyZipsFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Description: Copies objects from a source S3 bucket to a destination
  #     Handler: index.handler
  #     Runtime: python2.7
  #     Role: !GetAtt 'CopyZipsRole.Arn'
  #     Timeout: 240
  #     Code:
  #       ZipFile: !Join
  #         - "\n"
  #         - - import json
  #           - import logging
  #           - import threading
  #           - import boto3
  #           - import cfnresponse
  #           - ''
  #           - ''
  #           - 'def copy_objects(source_bucket, dest_bucket, prefix, objects):'
  #           - '    s3 = boto3.client(''s3'')'
  #           - '    for o in objects:'
  #           - '        key = prefix + o'
  #           - '        copy_source = {'
  #           - '            ''Bucket'': source_bucket,'
  #           - '            ''Key'': key'
  #           - '        }'
  #           - '        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
  #             Key=key)'
  #           - ''
  #           - ''
  #           - 'def delete_objects(bucket, prefix, objects):'
  #           - '    s3 = boto3.client(''s3'')'
  #           - '    objects = {''Objects'': [{''Key'': prefix + o} for o in objects]}'
  #           - '    s3.delete_objects(Bucket=bucket, Delete=objects)'
  #           - ''
  #           - ''
  #           - 'def timeout(event, context):'
  #           - '    logging.error(''Execution is about to time out, sending failure
  #             response to CloudFormation'')'
  #           - '    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)'
  #           - ''
  #           - ''
  #           - 'def handler(event, context):'
  #           - '    # make sure we send a failure to CloudFormation if the function
  #             is going to timeout'
  #           - '    timer = threading.Timer((context.get_remaining_time_in_millis()
  #             / 1000.00) - 0.5, timeout, args=[event, context])'
  #           - '    timer.start()'
  #           - ''
  #           - '    print(''Received event: %s'' % json.dumps(event))'
  #           - '    status = cfnresponse.SUCCESS'
  #           - '    try:'
  #           - '        source_bucket = event[''ResourceProperties''][''SourceBucket'']'
  #           - '        dest_bucket = event[''ResourceProperties''][''DestBucket'']'
  #           - '        prefix = event[''ResourceProperties''][''Prefix'']'
  #           - '        objects = event[''ResourceProperties''][''Objects'']'
  #           - '        if event[''RequestType''] == ''Delete'':'
  #           - '            delete_objects(dest_bucket, prefix, objects)'
  #           - '        else:'
  #           - '            copy_objects(source_bucket, dest_bucket, prefix, objects)'
  #           - '    except Exception as e:'
  #           - '        logging.error(''Exception: %s'' % e, exc_info=True)'
  #           - '        status = cfnresponse.FAILED'
  #           - '    finally:'
  #           - '        timer.cancel()'
  #           - '        cfnresponse.send(event, context, status, {}, None)'
  #           - ''
  # KeyBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     Tags: []
  # OutputBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !If
  #       - AutoGenOutputBucketName
  #       - !Ref 'OutputBucketName'
  #       - !Ref 'AWS::NoValue'
  #     VersioningConfiguration:
  #       Status: Enabled
  # #     Tags: []
  # KMSKey:
  #   Type: AWS::KMS::Key
  #   Properties:
  #     Description: git CodePipeline integration, used to encrypt/decrypt ssh keys
  #       stored in S3
  #     KeyPolicy:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Sid: Allow access for Key Administrators
  #           Effect: Allow
  #           Principal:
  #             AWS:
  #               - !Join
  #                 - ''
  #                 - - 'arn:aws:iam::'
  #                   - !Ref 'AWS::AccountId'
  #                   - :root
  #           Action:
  #             - kms:Create*
  #             - kms:Describe*
  #             - kms:Enable*
  #             - kms:List*
  #             - kms:Put*
  #             - kms:Update*
  #             - kms:Revoke*
  #             - kms:Disable*
  #             - kms:Get*
  #             - kms:Delete*
  #             - kms:ScheduleKeyDeletion
  #             - kms:CancelKeyDeletion
  #           Resource: '*'
  #         - Sid: Allow use of the key
  #           Effect: Allow
  #           Principal:
  #             AWS:
  #               - !Join
  #                 - ''
  #                 - - 'arn:aws:iam::'
  #                   - !Ref 'AWS::AccountId'
  #                   - :root
  #           Action:
  #             - kms:Encrypt
  #             - kms:Decrypt
  #             - kms:ReEncrypt*
  #             - kms:GenerateDataKey*
  #             - kms:DescribeKey
  #           Resource: '*'
  #         - Sid: Allow attachment of persistent resources
  #           Effect: Allow
  #           Principal:
  #             AWS:
  #               - !Join
  #                 - ''
  #                 - - 'arn:aws:iam::'
  #                   - !Ref 'AWS::AccountId'
  #                   - :root
  #           Action:
  #             - kms:CreateGrant
  #             - kms:ListGrants
  #             - kms:RevokeGrant
  #           Resource: '*'
  #           Condition:
  #             Bool:
  #               kms:GrantIsForAWSResource: true
  # CreateSSHKeyRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Path: /
  #     Policies:
  #       - PolicyName: git2cp-sshkeygen
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:GetObject
  #               Resource:
  #                 - !Join
  #                   - ''
  #                   - - 'arn:aws:s3:::'
  #                     - !Ref 'KeyBucket'
  #                     - /crypto.zip
  #             - Effect: Allow
  #               Action:
  #                 - s3:PutObject
  #               Resource:
  #                 - !Join
  #                   - ''
  #                   - - 'arn:aws:s3:::'
  #                     - !Ref 'KeyBucket'
  #                     - /enc_key
  #             - Effect: Allow
  #               Action:
  #                 - kms:Encrypt
  #               Resource:
  #                 - !GetAtt 'KMSKey.Arn'
  #             - Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource:
  #                 - arn:aws:logs:*:*:*
  # CreateSSHKeyLambda:
  #   DependsOn: CopyZips
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Handler: lambda_function.lambda_handler
  #     MemorySize: '128'
  #     Role: !GetAtt 'CreateSSHKeyRole.Arn'
  #     Runtime: python2.7
  #     Timeout: '300'
  #     Code:
  #       S3Bucket: !Ref 'LambdaZipsBucket'
  #       S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CreateSSHKey/lambda.zip'
  # CreateSSHKey:
  #   Type: AWS::CloudFormation::CustomResource
  #   Version: '1.0'
  #   Properties:
  #     ServiceToken: !GetAtt 'CreateSSHKeyLambda.Arn'
  #     KeyBucket: !Ref 'KeyBucket'
  #     Region: !Ref 'AWS::Region'
  #     KMSKey: !Ref 'KMSKey'
  # DeleteBucketContentsRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Path: /
  #     Policies:
  #       - PolicyName: git2cp-deletebucketcontents
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:*
  #               Resource:
  #                 - !Join
  #                   - ''
  #                   - - 'arn:aws:s3:::'
  #                     - !Ref 'KeyBucket'
  #                     - /*
  #                 - !Join
  #                   - ''
  #                   - - 'arn:aws:s3:::'
  #                     - !Ref 'OutputBucket'
  #                     - /*
  #                 - !Join
  #                   - ''
  #                   - - 'arn:aws:s3:::'
  #                     - !Ref 'KeyBucket'
  #                 - !Join
  #                   - ''
  #                   - - 'arn:aws:s3:::'
  #                     - !Ref 'OutputBucket'
  #             - Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource:
  #                 - arn:aws:logs:*:*:*
  # DeleteBucketContentsLambda:
  #   DependsOn: CopyZips
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Handler: lambda_function.lambda_handler
  #     MemorySize: '128'
  #     Role: !GetAtt 'DeleteBucketContentsRole.Arn'
  #     Runtime: python2.7
  #     Timeout: '300'
  #     Code:
  #       S3Bucket: !Ref 'LambdaZipsBucket'
  #       S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeleteBucketContents/lambda.zip'
  # DeleteBucketContents:
  #   Type: AWS::CloudFormation::CustomResource
  #   Version: '1.0'
  #   DependsOn:
  #     - KeyBucket
  #     - OutputBucket
  #   Properties:
  #     ServiceToken: !GetAtt 'DeleteBucketContentsLambda.Arn'
  #     KeyBucket: !Ref 'KeyBucket'
  #     OutputBucket: !Ref 'OutputBucket'
  # GitPullRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Path: /
  #     Policies:
  #       - PolicyName: git2cp-gitpull
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - kms:Decrypt
  #               Resource:
  #                 - !GetAtt 'KMSKey.Arn'
  #             - Effect: Allow
  #               Action:
  #                 - s3:PutObject
  #               Resource:
  #                 - !Join
  #                   - ''
  #                   - - 'arn:aws:s3:::'
  #                     - !Ref 'OutputBucket'
  #                 - !Join
  #                   - ''
  #                   - - 'arn:aws:s3:::'
  #                     - !Ref 'OutputBucket'
  #                     - /*
  #             - Effect: Allow
  #               Action:
  #                 - s3:GetObject
  #               Resource:
  #                 - !Join
  #                   - ''
  #                   - - 'arn:aws:s3:::'
  #                     - !Ref 'KeyBucket'
  #                     - /enc_key
  #             - Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource:
  #                 - arn:aws:logs:*:*:*
  # GitPullLambda:
  #   DependsOn: CopyZips
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Handler: lambda_function.lambda_handler
  #     MemorySize: '128'
  #     Role: !GetAtt 'GitPullRole.Arn'
  #     Runtime: python2.7
  #     Timeout: '300'
  #     Environment:
  #       Variables:
  #         ExcludeGit: 'True'
  #     Code:
  #       S3Bucket: !Ref 'LambdaZipsBucket'
  #       S3Key: !Sub '${QSS3KeyPrefix}functions/packages/GitPullS3/lambda.zip'
  ZipDlRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: git2cp-zipdl
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
                      - /*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*

  ZipDlLambdaSecurityGroup:
    Condition: ShouldRunInVPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to allow the lambda to access the git service
      GroupName: ZipDlLambdaSecurityGroup
      SecurityGroupEgress:
        - CidrIp: !Ref 'VPCCidrRange'
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: !Ref 'VPCCidrRange'
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      VpcId: !Ref 'VPCId'

  ZipDlLambda:
    # DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: download_zip.lambda_handler
      Layers: 
        - !FindInMap [RegionMap, !Ref 'AWS::Region', LayerVersionArn]
      Role: !GetAtt 'ZipDlRole.Arn'
      Code: lambda/
      # CodeUri: lambda/
      Description: 'Download zip file of git repo'
      # Code:
      #   S3Bucket: !Ref 'LambdaZipsBucket'
      #   S3Key: !Sub '${QSS3KeyPrefix}functions/packages/ZipDl/lambda.zip'
      Runtime: python3.6
      MemorySize: 128
      Timeout: 30
      VpcConfig: !If
        - ShouldRunInVPC
        - SecurityGroupIds:
            - !Ref 'ZipDlLambdaSecurityGroup'
          SubnetIds: !Ref 'SubnetIds'
        - !Ref 'AWS::NoValue'
      Environment:
        Variables:
          SCM_HOSTNAME_OVERRIDE: !Ref 'ScmHostnameOverride'

  WebHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: git2cp-webhook
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt 'ZipDlLambda.Arn'
                  # - !GetAtt 'GitPullLambda.Arn'
                  # - !GetAtt 'ZipDlLambda.Arn'

  WebHookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: '2.0'
        info:
          version: '2016-07-26T07:34:38Z'
          title: !Join
            - ''
            - - G2CP-
              - !Ref 'AWS::StackName'
        schemes:
          - https
        paths:
          /zipdl:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                type: aws
                credentials: !GetAtt 'WebHookRole.Arn'
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.X-Amz-Invocation-Type: '''Event'''
                passthroughBehavior: when_no_templates
                httpMethod: POST
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path//2015-03-31/functions/
                    - !GetAtt 'ZipDlLambda.Arn'
                    - /invocations
                requestTemplates:
                  application/json: !Join
                    - ''
                    - - "#set($allParams = $input.params())\n"
                      - "{\n"
                      - "\"body-json\" : $input.json('$'),\n"
                      - "\"params\" : {\n"
                      - "#foreach($type in $allParams.keySet())\n"
                      - "    #set($params = $allParams.get($type))\n"
                      - "\"$type\" : {\n"
                      - "    #foreach($paramName in $params.keySet())\n"
                      - "    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
                        \n"
                      - "        #if($foreach.hasNext),#end\n"
                      - "    #end\n"
                      - "}\n"
                      - "    #if($foreach.hasNext),#end\n"
                      - "#end\n"
                      - "},\n"
                      - "\"stage-variables\" : {\n"
                      - "#foreach($key in $stageVariables.keySet())\n"
                      - "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                        \n"
                      - "    #if($foreach.hasNext),#end\n"
                      - "#end\n"
                      - "},\n"
                      - "\"context\" : {\n"
                      - "    \"account-id\" : \"$context.identity.accountId\",\n"
                      - "    \"api-id\" : \"$context.apiId\",\n"
                      - "    \"api-key\" : \"$context.identity.apiKey\",\n"
                      - "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\"\
                        ,\n"
                      - "    \"caller\" : \"$context.identity.caller\",\n"
                      - "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
                        ,\n"
                      - "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
                        ,\n"
                      - "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
                        ,\n"
                      - "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
                        ,\n"
                      - "    \"http-method\" : \"$context.httpMethod\",\n"
                      - "    \"stage\" : \"$context.stage\",\n"
                      - "    \"source-ip\" : \"$context.identity.sourceIp\",\n"
                      - "    \"user\" : \"$context.identity.user\",\n"
                      - "    \"user-agent\" : \"$context.identity.userAgent\",\n"
                      - "    \"user-arn\" : \"$context.identity.userArn\",\n"
                      - "    \"request-id\" : \"$context.requestId\",\n"
                      - "    \"resource-id\" : \"$context.resourceId\",\n"
                      - "    \"resource-path\" : \"$context.resourcePath\",\n"
                      - "    \"oauth-key\" : \"$stageVariables.oauthkey\",\n"
                      - "    \"oauth-secret\" : \"$stageVariables.oauthsecret\",\n"
                      - "    \"output-bucket\" : \"$stageVariables.outputbucket\"\
                        ,\n"
                      - "    \"git-token\" : \"$stageVariables.gittoken\"\n"
                      - "    }\n"
                      - '}'
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
        definitions:
          Empty:
            type: object

  WebHookApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'WebHookApi'
      StageName: DummyStage

  WebHookApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref 'WebHookApiDeployment'
      RestApiId: !Ref 'WebHookApi'
      StageName: Prod
      Variables:
        outputbucket: !Ref 'OutputBucket'
        # allowedips: !If
        #   - UseAllowedIps
        #   - !Ref 'AllowedIps'
        #   - !Ref 'AWS::NoValue'
        # apisecrets: !If
        #   - UseApiSecret
        #   - !Ref 'ApiSecret'
        #   - !Ref 'AWS::NoValue'
        gittoken: !If
          - UseGitToken
          - !Ref 'GitToken'
          - !Ref 'AWS::NoValue'
        oauthkey: !If
          - UseOauthKey
          - !Ref 'OauthKey'
          - !Ref 'AWS::NoValue'
        oauthsecret: !If
          - UseOauthSecret
          - !Ref 'OauthSecret'
          - !Ref 'AWS::NoValue'

  CustomDomainCertificate:
    Condition: UseCustomDomain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref 'CustomDomainName'
  WebHookApiCustomDomainName:
    Condition: UseCustomDomain
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref 'CustomDomainCertificate'
      DomainName: !Ref 'CustomDomainName'
  WebHookApiCustomDomainNameMapping:
    Condition: UseCustomDomain
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref 'CustomDomainName'
      RestApiId: !Ref 'WebHookApi'
Outputs:

  # CustomDomainNameCNAME:
  #   Value: !If
  #     - UseCustomDomain
  #     - !GetAtt 'WebHookApiCustomDomainName.DistributionDomainName'
  #     - ''

  # PublicSSHKey:
  #   Value: !Ref 'CreateSSHKey'
  
  # GitPullWebHookApi:
  #   Value: !Join
  #     - ''
  #     - - ' https://'
  #       - !If
  #         - UseCustomDomain
  #         - !Ref 'CustomDomainName'
  #         - !Join
  #           - ''
  #           - - !Ref 'WebHookApi'
  #             - .execute-api.
  #             - !Ref 'AWS::Region'
  #             - .amazonaws.com
  #       - /
  #       - !Ref 'WebHookApiProdStage'
  #       - /gitpull

  ZipDownloadWebHookApi:
    Value: !Join
      - ''
      - - ' https://'
        - !If
          - UseCustomDomain
          - !Ref 'CustomDomainName'
          - !Join
            - ''
            - - !Ref 'WebHookApi'
              - .execute-api.
              - !Ref 'AWS::Region'
              - .amazonaws.com
        - /
        - !Ref 'WebHookApiProdStage'
        - /zipdl
  OutputBucketName:
    Value: !Ref 'OutputBucket'
